#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require 'to_slug'
require 'set'

preprocess do
    tags = Set.new

    @items.each do |item|
        if item[:tags] and item[:kind] == 'article'
            item[:tags].each { |t| tags.add(t.downcase) }
        end
    end

    tags.each do |tag|
        @items.create("", { :tag => tag, :title => 'tag: ' + tag, :description => tag },
                      Nanoc::Identifier.new("/tag/#{tag}/", type: :legacy))
    end

    create_sitemap
end

compile '/CNAME/' do
    # don’t filter or layout
end

compile /(rss|atom)/ do
    # TODO(aktau): Re-instate the rep.binary? filter:
    #
    #   filter :erb unless rep.binary? # e.g. rss.png image
    #
    # This stopped working int he nanoc4 migration.
    filter :erb
end

compile '/stylesheets/*' do
  filter :erb
  filter :rainpress if File.basename(item[:content_filename], ".*") == 'all'
end

compile %r{^/(google|robots|Bing)} do
    # Don't filter or layout any google files, robots.txt, error pages .
end

compile %r{^/(sitemap)/$} do
    # sitemap does get filtered with erb, but get no layout.
    filter :erb
end

compile '/sitemap/', :rep => 'gzip' do
    filter :erb
    filter :shellcmd, :cmd => 'gzip'
end

compile '/images/*/', :rep => :thumbnail do
    filter :thumbnailize, :width => 600
end

compile 'posts/*' do
    filter :kramdown
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
    filter :imagesize

    layout 'post'
end

compile '/contact' do
    filter :kramdown
    filter :imagesize

    layout 'contact'
end

compile '/tag/*' do
    layout 'tag'
end

compile '*' do
    if item.binary?
        # don’t filter binary items
    else
        case item[:extension]
            when 'md'
                filter :kramdown
            when 'erb'
                filter :erb
        end

        layout 'default'
    end
end

# for github pages...
route '/CNAME/' do
  '/CNAME'
end

route '/(atom|rss)/' do
    item.identifier.chop + '.xml'
end

# for google webmaster tools
route %r{^/(google|robots|sitemap|Bing)} do
  item.identifier.chop + '.' + item[:extension]
end

route '/sitemap/' do
    '/sitemap.xml'
end

route '/sitemap/', :rep => 'gzip' do
    '/sitemap.xml.gz'
end

route '/js/*/' do
  item.identifier.chop + '.' + item[:extension]
end

# route '/stylesheets/*/' do
#   item.identifier.chop + '.' + item[:extension]
# end

route '/stylesheets/*' do
    # if not debug mode, only let all.css through
    unless @config[:debug]
        item.identifier.chop + '.css' if File.basename(item[:content_filename], ".*") == 'all'
    else
        item.identifier.chop + '.css'
    end
end

route '/images/*', :rep => :thumbnail do
    item.identifier.chop + '-small.' + item[:extension]
end

route '/posts/*' do
    slug = item[:title].to_slug
    date = item[:created_at]
    raise "No Posted Date!" if date.nil?

    prefix = item[:draft] ? '/draft' : ''

    prefix + date.strftime("/%Y/%m/%d/") + "#{slug}/index.html"
end

route '*' do
    if item.binary?
        # Write item with identifier /foo/ to /foo.ext
        item.identifier.chop + '.' + item[:extension]
    else
        # Write item with identifier /foo/ to /foo/index.html
        item.identifier + 'index.html'
    end
end

layout '*', :erb
